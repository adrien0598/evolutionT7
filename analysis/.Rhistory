library(igraph)
library(fields)
library(blockmodels)
library(igraph)
library(fields)
library(blockmodels)
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
setwd("~/Documents/IPS2/test/SCRIPTS")
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
##############################################
setwd("~/")
setwd("~/Documents/IPS2/test/SCRIPTS")
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
##############################################
setwd("~/Documents/IPS2/test/SCRIPTS")
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
install.packages(devtools)
install.packages("devtools")
BiocManager::install("preprocessCore")
BiocManager::install("Biobase")
BiocManager::install("GSVA")
BiocManager::install("sva")
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,15,14,14,12,12))
(d$age <= 14).sum()
(d$age <= 14)
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,15,14,14,12,12,18))
(d$age <= 14)
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,11,12,13,15,14,14,12,12,18))
d$age[(d$age <= 14)]
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,11,12,13,15,14,14,12,12,18))
(length(d$age[(d$age <= 14)])/length(d$age))*100
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,12,12,11,12,13,15,14,14,12,12,18))
data("BG_2")
data("BG_2")
(length(d$age[(d$age <= 14)])/length(d$age))*100
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,12,12,12,11,12,13,15,14,14,12,12,18))
data("BG_2")
data("BG_2")
(length(d$age[(d$age <= 14)])/length(d$age))*100
max(d$age)
data = data.frame(age = c(37,49,44,61,65,78,53,54,59,59,53,60,54,35,71,24,56,54),
sex = c("M", "F", "M", "F", "F", "F", "F", "M", "M", "M", "M", "M", "M", "M", "F", "F", "F", "F"))
library(ggplot2)
ggplot(data) + aes(y = age, fill = sex) + geom_boxplot()
a = data.frame(v1 = c(1,5,6,4,8,9,5,23,4,9,4,4), v2 = rep(5,12), v3 = seq(1,12,1))
a
library(FactoMineR)
a.acp = PCA(a, ncp = 2)
a$eig
a.acp$eig
a.acp$var
a.acp$var$coord
a = data.frame(v = c(1,2,3,5,6,9,8), f = c(1,5,8,7,7,7,7))
a
a[-1,]
a <- data.frame(x = c(1,2,3,4,5,6), y = c(1,2,3,4,5,7), z = c(2,3,4,5,6,7))
a
a[-c(1,3,5),]
0.1*0.1*0.1
0.001**(1/3)
install.packages("palmerpenguins")
sumary(penguins)
summary(penguins)
library(ggplot2)
library(palmerpenguins)
summary(penguins)
ggplot(penguins) +
aes(x = bill_length_mm, y = bill_depth_mm) +
geom_point()
d <- na.omit(penguins)
ggplot(penguins) +
aes(x = bill_length_mm, y = bill_depth_mm, size = body_mass_g, color = species) +
geom_point(alpha = 0.5)
ggplot(penguins) +
aes(x = bill_length_mm, y = bill_depth_mm, size = body_mass_g, color = species) +
geom_point(alpha = 0.7)
ggplot(d) +
aes(x = body_masse_g) +
geom_histogram()
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram()
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 1)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 100)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 100)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 10)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(bin = 50)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(bins = 50)
ggplot(d) +
aes(x = body_mass_g, color = species) +
geom_density()
ggplot(d) +
aes(x = body_mass_g, fill = species) +
geom_density()
ggplot(d) +
aes(x = body_mass_g, fill = species) +
geom_density(alpha=0.7)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DeconRNASeq")
library(DeconRNASeq)
data(multi_tissue)
View(x.data)
View(fraction)
View(x.signature.filtered)
View(x.signature.filtered.optimal)
View(x.data)
install.packages("Seurat")
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages("installr")
install.packages("installr")
library(installr)
updateR()
library_size = data.frame(cell_barcode = colnames(sc_counts), size = apply(sc_counts, 2, function(x) sum(x)))
scale = library_size$size/1000000 #scale factor
a = data.frame(v1 = c(1,2,3), v2 = c(2,3,4), v3 = c(5,1,2), v4 = c(5,9,4))
a
b = c("v1", "v2")
b
a[b]
remove.packages('reticulate')
remove.packages('Seurat')
install.packages('Seurat')
library(Seurat)
install.packages("plotly")
install.packages("httr")
install.packages("openssl")
install.package("libssl-dev")
install.packages("libssl-dev")
q()
install.packages("ggplot2")
install.packages("r-api-3.5")
capabiliies()
capabilities()
install.packages('CHAT')
install.packages("TPES")
library(TPES)
library(CHAT)
library(CHAT)
install.packages('CHAT')
install.packages("~/Téléchargements/CHAT_1.1.tar.gz", repos = NULL, type = "source")
library(CHAT)
devtools::install_github("cgplab/PAMES")
library(devtools)
install.packages("devtools")
devtools::install_github("cgplab/PAMES")
install.packages("usethis")
install.packages("gert")
warnings()
warnings()
install.packages(c("BiocManager","Seurat","SCINA","ggplot2","devtools","shiny"))
BiocManager::install(c("SingleCellExperiment","scater","dplyr",
"scmap","celldex","SingleR"))
install.packages(c("BiocManager","Seurat","SCINA","ggplot2","devtools","shiny"))
BiocManager::install(c("SingleCellExperiment","scater","dplyr",
"scmap","celldex","SingleR"))
devtools::install_github("immunogenomics/harmony")
install.package("devtools")
install.packages("devtools")
install.packages("openssl")
install.packages("libssl-dev")
install.packages("devtools")
install.packages(c("BiocManager","Seurat","SCINA","ggplot2","devtools","shiny"))
BiocManager::install(c("SingleCellExperiment","scater","dplyr",
"scmap","celldex","SingleR"))
devtools::install_github("immunogenomics/harmony")
devtools::install_github("romanhaa/cerebroApp")
devtools::install_github("romanhaa/cerebroApp")
devtools::install_github("mw201608/msigdb")
install.packages("Seurat")
library(Seurat)
library(stringr)
# Data
setwd("~/Documents/iGEM/analyse_ngs/evolutionT7/analysis") # set to source file location
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # (if using Rstudio)
load("variants.rds")
# Parse
type = c()
type_only = c()
sens = c()
pol = c()
mutator_type = c()
adenine = c("TadA*-T7", "ABE8.20-m-T7","TadA*-CGG", "ABE8.20-m-CGG")
non = c("pSEVA221", "T7", "pSEVA471", "CGG")
tmp <- data.frame(variants[(variants$Depth > 20),])
for (i in 1:nrow(tmp)) {
if (substring(tmp$Mutator[i], nchar(tmp$Mutator[i])-2, nchar(tmp$Mutator[i])) == "CGG"){
pol = c(pol, "CGG")
}
else if (substring(tmp$Mutator[i], nchar(tmp$Mutator[i])-1, nchar(tmp$Mutator[i])) == "T7"){
pol = c(pol, "T7")
}
else {
pol = c(pol, "no")
}
if (tmp$Reference[i] == "C" & tmp$Mutation[i] == "T"){
type = c(type, "Cytosine_forward")
type_only = c(type_only, "Cytosine")
sens = c(sens, "Forward")
}
else if (tmp$Reference[i] == "G" & tmp$Mutation[i] == "A"){
type = c(type, "Cytosine_reverse")
type_only = c(type_only, "Cytosine")
sens = c(sens, "Reverse")
}
else if (tmp$Reference[i] == "A" & tmp$Mutation[i] == "G"){
type = c(type, "Adenine_forward")
type_only = c(type_only, "Adenine")
sens = c(sens, "Forward")
}
else if (tmp$Reference[i] == "T" & tmp$Mutation[i] == "C"){
type = c(type, "Adenine_reverse")
type_only = c(type_only, "Adenine")
sens = c(sens, "Reverse")
}
else {
type = c(type, "uncategorized")
type_only = c(type_only, "uncategorized")
sens = c(sens, "uncategorized")
}
if (tmp$Mutator[i] %in% non){
mutator_type = c(mutator_type, "no")
}
else if (tmp$Mutator[i] %in% adenine){
mutator_type = c(mutator_type, "Adenine")
}
else {
mutator_type = c(mutator_type, "Cytosine")
}
}
tmp[["Mutation_type"]] = type
tmp[["Orientation"]] = sens
tmp[["Type"]] = type_only
tmp[["Polymerase"]] = pol
tmp[['Mutator_type']] = mutator_type
tmp$Mutator_type = as.factor(tmp$Mutator_type)
tmp$Polymerase = as.factor(tmp$Polymerase)
# Target specificity
gg <- data.frame(Mutator = rep(c("pSEVA221", "T7", "AID-T7", "pmCDAI-T7",
"rAPOBEC1-T7", "TadA*-T7",
"evoAPOBEC1-BE4max-T7", "evo-CDA1-BE4max-T7",
"ABE8.20-m-T7", "pSEVA471", "CGG", "AID-CGG",
"pmCDA1-CGG", "rAPOBEC1-CGG",
"TadA*-CGG", "evoAPOBEC1-BE4max-CGG",
"evo-CDA1-BE4max-CGG", "ABE8.20-m-CGG"),2),
Region = c(rep("non-targeted", 18), rep("targeted", 18)))
mut = c()
for (i in 1:length(gg$Mutator)){
mut = c(mut, sum(tmp$Occurences[(tmp$Mutator == gg$Mutator[i] & tmp$Region == gg$Region[i])]))
}
gg[["Mutation_number"]] = mut
tab = data.frame(Mutator = c("pSEVA221", "T7", "AID-T7", "pmCDAI-T7",
"rAPOBEC1-T7", "TadA*-T7",
"evoAPOBEC1-BE4max-T7", "evo-CDA1-BE4max-T7",
"ABE8.20-m-T7", "pSEVA471", "CGG", "AID-CGG",
"pmCDA1-CGG", "rAPOBEC1-CGG",
"TadA*-CGG", "evoAPOBEC1-BE4max-CGG",
"evo-CDA1-BE4max-CGG", "ABE8.20-m-CGG"))
a = c()
for (i in tab$Mutator){
a = c(a, gg$Mutation_number[(gg$Mutator == i & gg$Region == "targeted")] /
gg$Mutation_number[(gg$Mutator == i & gg$Region == "non-targeted")])
}
tab[['Target_specificity']] = a
# Strand and reaction specificity
trans = data.frame(mutator = c("pSEVA221", "T7", "AID-T7", "pmCDAI-T7",
"rAPOBEC1-T7", "TadA*-T7",
"evoAPOBEC1-BE4max-T7", "evo-CDA1-BE4max-T7",
"ABE8.20-m-T7", "pSEVA471", "CGG", "AID-CGG",
"pmCDA1-CGG", "rAPOBEC1-CGG",
"TadA*-CGG", "evoAPOBEC1-BE4max-CGG",
"evo-CDA1-BE4max-CGG", "ABE8.20-m-CGG"),
mutation = c(NA, NA, "Cytosine_forward",
"Cytosine_forward", "Cytosine_forward",
"Adenine_forward", "Cytosine_forward",
"Cytosine_forward", "Adenine_forward",
NA, NA, "Cytosine_reverse",
"Cytosine_reverse", "Cytosine_reverse",
"Adenine_reverse", "Cytosine_reverse",
"Cytosine_reverse", "Adenine_reverse"),
strand = c(NA, rep("Forward", 8),
NA, rep("Reverse", 8)),
reaction = c(rep(c(NA, NA, "Cytosine",
"Cytosine", "Cytosine",
"Adenine", "Cytosine",
"Cytosine", "Adenine"), 2)))
mut = c()
for (i in tab$Mutator){
mut = c(mut,
sum(tmp$Occurences[(tmp$Mutator == i &
tmp$Mutation_type == trans$mutation[trans$mutator == i])])/
sum(tmp$Occurences[(tmp$Mutator == i &
tmp$Mutation_type != "uncategorized" &
tmp$Mutation_type != trans$mutation[trans$mutator == i])]))
}
tab[["Mutation_specificity"]] = mut
# Reaction specificity
mut = c()
for (i in tab$Mutator){
mut = c(mut,
sum(tmp$Occurences[(tmp$Mutator == i &
tmp$Type == trans$reaction[trans$mutator == i])])/
sum(tmp$Occurences[(tmp$Mutator == i &
tmp$Type != "uncategorized" &
tmp$Type != trans$reaction[trans$mutator == i])]))
}
tab[["Reaction_specificity"]] = mut
# Strand specificity
mut = c()
for (i in tab$Mutator){
mut = c(mut,
sum(tmp$Occurences[(tmp$Mutator == i &
tmp$Orientation == trans$strand[trans$mutator == i])])/
sum(tmp$Occurences[(tmp$Mutator == i &
tmp$Orientation != "uncategorized" &
tmp$Orientation != trans$strand[trans$mutator == i])]))
}
tab[["Strand_specificity"]] = mut
# normalisation by fragment size
# map size : 4115
# targeted region size : 2991
# => non targeted region size : 1124
#norm_factor = 2991/1124
#tab[,2:5] = tab[,2:5]/norm_factor
# tot mutation number (fiability indicator)
a = c()
b = c()
for (i in tab$Mutator){
a = c(a, sum(tmp$Occurences[(tmp$Mutator == i & tmp$Mutation_type != "uncategorized")]))
b = c(b, length(tmp$Occurences[(tmp$Mutator == i & tmp$Mutation_type != "uncategorized")]))
}
tab[['Total mutation number']] = a
tab[['Total mutation count']] = b
# Print
summary(tab)
write.csv(tab, file = "Figure/Tab1.csv", quote = FALSE, row.names = FALSE, col.names = TRUE)
write.csv(tab, file = "Figure/Tab1.csv", quote = FALSE, row.names = FALSE, col.names = TRUE)
