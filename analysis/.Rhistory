library(igraph)
library(fields)
library(blockmodels)
library(igraph)
library(fields)
library(blockmodels)
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
setwd("~/Documents/IPS2/test/SCRIPTS")
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
##############################################
setwd("~/")
setwd("~/Documents/IPS2/test/SCRIPTS")
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
##############################################
setwd("~/Documents/IPS2/test/SCRIPTS")
###############################################################################
##                           LIBRARIES USED
###############################################################################
library(igraph)
library(fields)
library(blockmodels)
###############################################################################
##                           COEXPRESSION STUDIES
## From the results of Mixmod, the number of coexpression clusters
##  and the gene classification are determined per project
###############################################################################
source("0_coexpression_per_project.R")
project<-system("ls ../PRJ* -d",T)
for (pp in 1:length(project))
Coexpression(repAnalyse=project[pp],date.creation="20210517",alpha=0.05)
install.packages(devtools)
install.packages("devtools")
BiocManager::install("preprocessCore")
BiocManager::install("Biobase")
BiocManager::install("GSVA")
BiocManager::install("sva")
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,15,14,14,12,12))
(d$age <= 14).sum()
(d$age <= 14)
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,15,14,14,12,12,18))
(d$age <= 14)
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,11,12,13,15,14,14,12,12,18))
d$age[(d$age <= 14)]
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,11,12,13,15,14,14,12,12,18))
(length(d$age[(d$age <= 14)])/length(d$age))*100
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,12,12,11,12,13,15,14,14,12,12,18))
data("BG_2")
data("BG_2")
(length(d$age[(d$age <= 14)])/length(d$age))*100
d = data.frame(age = c(10,10,10,10,10,10,10,15,15,12,12,12,11,12,13,15,14,14,12,12,18))
data("BG_2")
data("BG_2")
(length(d$age[(d$age <= 14)])/length(d$age))*100
max(d$age)
data = data.frame(age = c(37,49,44,61,65,78,53,54,59,59,53,60,54,35,71,24,56,54),
sex = c("M", "F", "M", "F", "F", "F", "F", "M", "M", "M", "M", "M", "M", "M", "F", "F", "F", "F"))
library(ggplot2)
ggplot(data) + aes(y = age, fill = sex) + geom_boxplot()
a = data.frame(v1 = c(1,5,6,4,8,9,5,23,4,9,4,4), v2 = rep(5,12), v3 = seq(1,12,1))
a
library(FactoMineR)
a.acp = PCA(a, ncp = 2)
a$eig
a.acp$eig
a.acp$var
a.acp$var$coord
a = data.frame(v = c(1,2,3,5,6,9,8), f = c(1,5,8,7,7,7,7))
a
a[-1,]
a <- data.frame(x = c(1,2,3,4,5,6), y = c(1,2,3,4,5,7), z = c(2,3,4,5,6,7))
a
a[-c(1,3,5),]
0.1*0.1*0.1
0.001**(1/3)
install.packages("palmerpenguins")
sumary(penguins)
summary(penguins)
library(ggplot2)
library(palmerpenguins)
summary(penguins)
ggplot(penguins) +
aes(x = bill_length_mm, y = bill_depth_mm) +
geom_point()
d <- na.omit(penguins)
ggplot(penguins) +
aes(x = bill_length_mm, y = bill_depth_mm, size = body_mass_g, color = species) +
geom_point(alpha = 0.5)
ggplot(penguins) +
aes(x = bill_length_mm, y = bill_depth_mm, size = body_mass_g, color = species) +
geom_point(alpha = 0.7)
ggplot(d) +
aes(x = body_masse_g) +
geom_histogram()
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram()
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 1)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 100)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 100)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(binwidth = 10)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(bin = 50)
ggplot(d) +
aes(x = body_mass_g) +
geom_histogram(bins = 50)
ggplot(d) +
aes(x = body_mass_g, color = species) +
geom_density()
ggplot(d) +
aes(x = body_mass_g, fill = species) +
geom_density()
ggplot(d) +
aes(x = body_mass_g, fill = species) +
geom_density(alpha=0.7)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DeconRNASeq")
library(DeconRNASeq)
data(multi_tissue)
View(x.data)
View(fraction)
View(x.signature.filtered)
View(x.signature.filtered.optimal)
View(x.data)
install.packages("Seurat")
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages("installr")
install.packages("installr")
library(installr)
updateR()
library_size = data.frame(cell_barcode = colnames(sc_counts), size = apply(sc_counts, 2, function(x) sum(x)))
scale = library_size$size/1000000 #scale factor
a = data.frame(v1 = c(1,2,3), v2 = c(2,3,4), v3 = c(5,1,2), v4 = c(5,9,4))
a
b = c("v1", "v2")
b
a[b]
remove.packages('reticulate')
remove.packages('Seurat')
install.packages('Seurat')
library(Seurat)
install.packages("plotly")
install.packages("httr")
install.packages("openssl")
install.package("libssl-dev")
install.packages("libssl-dev")
q()
install.packages("ggplot2")
install.packages("r-api-3.5")
capabiliies()
capabilities()
install.packages('CHAT')
install.packages("TPES")
library(TPES)
library(CHAT)
library(CHAT)
install.packages('CHAT')
install.packages("~/Téléchargements/CHAT_1.1.tar.gz", repos = NULL, type = "source")
library(CHAT)
devtools::install_github("cgplab/PAMES")
library(devtools)
install.packages("devtools")
devtools::install_github("cgplab/PAMES")
install.packages("usethis")
install.packages("gert")
warnings()
warnings()
install.packages(c("BiocManager","Seurat","SCINA","ggplot2","devtools","shiny"))
BiocManager::install(c("SingleCellExperiment","scater","dplyr",
"scmap","celldex","SingleR"))
install.packages(c("BiocManager","Seurat","SCINA","ggplot2","devtools","shiny"))
BiocManager::install(c("SingleCellExperiment","scater","dplyr",
"scmap","celldex","SingleR"))
devtools::install_github("immunogenomics/harmony")
install.package("devtools")
install.packages("devtools")
install.packages("openssl")
install.packages("libssl-dev")
install.packages("devtools")
install.packages(c("BiocManager","Seurat","SCINA","ggplot2","devtools","shiny"))
BiocManager::install(c("SingleCellExperiment","scater","dplyr",
"scmap","celldex","SingleR"))
devtools::install_github("immunogenomics/harmony")
devtools::install_github("romanhaa/cerebroApp")
devtools::install_github("romanhaa/cerebroApp")
devtools::install_github("mw201608/msigdb")
install.packages("Seurat")
library(Seurat)
# Data
setwd("~/Documents/iGEM/analyse_ngs/evolutionT7/analysis") # set to source file location
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # (if using Rstudio)
load("variants.rds")
nb_C = 709
nb_T = 769
nb_A = 793
nb_G = 719
# Parse
gg = variants[(variants$Depth > 20 & variants$Batch == "A" & variants$Region == "targeted" & !(variants$Mutator %in% c("CGG", "pSEVA471",
"pSEVA221", "T7"))),]
mutator = c()
mutrate = c()
reac = c()
gg$Mutator = as.factor(gg$Mutator)
for (i in levels(gg$Mutator)){
mutator = c(mutator, rep(as.character(i),4))
reac = c(reac, c("C -> T", "T -> C", "G -> A", "A -> G"))
print(mean(gg$Depth[(gg$Reference == "C" &
gg$Mutation == "T" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "C" &
gg$Mutation == "T" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "C" &
gg$Mutation == "T" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "T" &
gg$Mutation == "C" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "T" &
gg$Mutation == "C" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "G" &
gg$Mutation == "A" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "G" &
gg$Mutation == "A" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "A" &
gg$Mutation == "G" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "A" &
gg$Mutation == "G" &
gg$Mutator == i)]))
}
gg = data.frame(Mutator = mutator, Mutation_rate = mutrate, Activity = reac)
#gg = na.omit(gg)
gg$Mutation_rate = gg$Mutation_rate/40 # per generations
gg$Mutation_rate[gg$Activity == "C -> T"] = (gg$Mutation_rate[gg$Activity == "C -> T"]/nb_C)*1000
gg$Mutation_rate[gg$Activity == "T -> C"] = (gg$Mutation_rate[gg$Activity == "T -> C"]/nb_T)*1000
gg$Mutation_rate[gg$Activity == "A -> G"] = (gg$Mutation_rate[gg$Activity == "A -> G"]/nb_A)*1000
gg$Mutation_rate[gg$Activity == "G -> A"] = (gg$Mutation_rate[gg$Activity == "G -> A"]/nb_G)*1000
gg$Mutation_rate[((gg$Activity == "C -> T" | gg$Activity == "G -> A") &
gg$Mutator %in% c("TadA*-T7", "ABE8.20-m-T7",
"TadA*-CGG", "ABE8.20-m-CGG"))] = NA
gg$Mutation_rate[((gg$Activity == "T -> C" | gg$Activity == "A -> G") &
!(gg$Mutator %in% c("TadA*-T7", "ABE8.20-m-T7",
"TadA*-CGG", "ABE8.20-m-CGG")))] = NA
gg = na.omit(gg)
gg = variants[(variants$Depth > 20 & variants$Batch == "A" & variants$Region == "targeted" & !(variants$Mutator %in% c("pSEVA471",
"pSEVA221"))),]
mutator = c()
mutrate = c()
reac = c()
gg$Mutator = as.factor(gg$Mutator)
for (i in levels(gg$Mutator)){
mutator = c(mutator, rep(as.character(i),4))
reac = c(reac, c("C -> T", "T -> C", "G -> A", "A -> G"))
print(mean(gg$Depth[(gg$Reference == "C" &
gg$Mutation == "T" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "C" &
gg$Mutation == "T" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "C" &
gg$Mutation == "T" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "T" &
gg$Mutation == "C" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "T" &
gg$Mutation == "C" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "G" &
gg$Mutation == "A" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "G" &
gg$Mutation == "A" &
gg$Mutator == i)]))
mutrate = c(mutrate, mean(gg$Occurences[(gg$Reference == "A" &
gg$Mutation == "G" &
gg$Mutator == i)]) /
mean(gg$Depth[(gg$Reference == "A" &
gg$Mutation == "G" &
gg$Mutator == i)]))
}
gg = data.frame(Mutator = mutator, Mutation_rate = mutrate, Activity = reac)
#gg = na.omit(gg)
gg$Mutation_rate = gg$Mutation_rate/40 # per generations
gg$Mutation_rate[gg$Activity == "C -> T"] = (gg$Mutation_rate[gg$Activity == "C -> T"]/nb_C)*1000
gg$Mutation_rate[gg$Activity == "T -> C"] = (gg$Mutation_rate[gg$Activity == "T -> C"]/nb_T)*1000
gg$Mutation_rate[gg$Activity == "A -> G"] = (gg$Mutation_rate[gg$Activity == "A -> G"]/nb_A)*1000
gg$Mutation_rate[gg$Activity == "G -> A"] = (gg$Mutation_rate[gg$Activity == "G -> A"]/nb_G)*1000
gg$Mutation_rate[((gg$Activity == "C -> T" | gg$Activity == "G -> A") &
gg$Mutator %in% c("TadA*-T7", "ABE8.20-m-T7",
"TadA*-CGG", "ABE8.20-m-CGG"))] = NA
gg$Mutation_rate[((gg$Activity == "T -> C" | gg$Activity == "A -> G") &
!(gg$Mutator %in% c("TadA*-T7", "ABE8.20-m-T7",
"TadA*-CGG", "ABE8.20-m-CGG", "T7", "CGG")))] = NA
gg = na.omit(gg)
ggplot(gg) +
aes(x = Mutator, y = Mutation_rate, fill = Activity) +
geom_col() +
xlab("Mutator") +
ylab("Mutation rate") +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
scale_x_discrete(name ="Mutator",
limits=c("T7", "AID-T7", "pmCDAI-T7", "rAPOBEC1-T7",
"TadA*-T7", "evoAPOBEC1-BE4max-T7", "evo-CDA1-BE4max-T7",
"ABE8.20-m-T7", "", "CGG", "AID-CGG", "pmCDA1-CGG", "rAPOBEC1-CGG",
"TadA*-CGG", "evoAPOBEC1-BE4max-CGG", "evo-CDA1-BE4max-CGG",
"ABE8.20-m-CGG"))
library(ggplot2)
ggplot(gg) +
aes(x = Mutator, y = Mutation_rate, fill = Activity) +
geom_col() +
xlab("Mutator") +
ylab("Mutation rate") +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
scale_x_discrete(name ="Mutator",
limits=c("T7", "AID-T7", "pmCDAI-T7", "rAPOBEC1-T7",
"TadA*-T7", "evoAPOBEC1-BE4max-T7", "evo-CDA1-BE4max-T7",
"ABE8.20-m-T7", "", "CGG", "AID-CGG", "pmCDA1-CGG", "rAPOBEC1-CGG",
"TadA*-CGG", "evoAPOBEC1-BE4max-CGG", "evo-CDA1-BE4max-CGG",
"ABE8.20-m-CGG"))
gg$Mutation_rate[gg$Mutator == "T7" | gg$Mutator = "CGG"] = gg$Mutation_rate[gg$Mutator == "T7" | gg$Mutator = "CGG"]/10
gg$Mutation_rate[gg$Mutator == "T7" | gg$Mutator = "CGG"]
gg$Mutation_rate[gg$Mutator == "T7" | gg$Mutator == "CGG"]
gg$Mutation_rate[gg$Mutator == "T7" | gg$Mutator == "CGG"] = gg$Mutation_rate[gg$Mutator == "T7" | gg$Mutator == "CGG"]/10
ggplot(gg) +
aes(x = Mutator, y = Mutation_rate, fill = Activity) +
geom_col() +
xlab("Mutator") +
ylab("Mutation rate") +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
scale_x_discrete(name ="Mutator",
limits=c("T7", "AID-T7", "pmCDAI-T7", "rAPOBEC1-T7",
"TadA*-T7", "evoAPOBEC1-BE4max-T7", "evo-CDA1-BE4max-T7",
"ABE8.20-m-T7", "", "CGG", "AID-CGG", "pmCDA1-CGG", "rAPOBEC1-CGG",
"TadA*-CGG", "evoAPOBEC1-BE4max-CGG", "evo-CDA1-BE4max-CGG",
"ABE8.20-m-CGG"))
